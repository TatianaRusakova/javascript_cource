1)
var tc,tf;
let tc=prompt('Задайте температуру в градусах по Цельсию!!',0);
let tf=(9 / 5) * tc + 32;
alert('Температура по Фаренгайту=  ${tf}');

2)
var name= "Василий";
var admin;
let admin=name;
alert(admin);

3)
выражение 1000+"108" будет равно '1000108', потому что оператор "+" в данном случае произведен конкатенацию строк,
поскольку один из операндов явно строка.
4)
 Атрибуты async и defer тега <script> нужны для того, чтобы скрипт, который должен загрузиться и выполниться 
не блокировал отрисовку содержимого страницы. Иначе , пока не загрузится и не выполнится скрипт, все, что ниже скрипта блокируется.
Если использовать атрибуты async и defer, пользователь сразу видит содержимое страницы.
Различия этих атрибутов, во-первых, в порядке выполнения скриптов: при использовании аотрибуте defer порядок выполнения
скриптов остается как в документе -> скрипты выполняются в том порядке, как расположены в документе, даже если маленький скрипт,
который расположен ниже большого загрузится раньше, н будет ждать своей очеереди, чтобы выполнится; при использовании 
атрибута async порядок выполения скриптов будет таким же, как и порядок загрузки, то есть какой скрипт первым загрузился, такой и выполнился.
Второе отличие в выполении скрипта в зависимости от события DomContentLoaded. В случае с атрибутом defer,
скрипт будет выполнен после того, как документ загружен и обработан, но перед событием DomContentLoaded. В случае с атрибутом async,
факт выполнеения события DomContentLoaded значения не имеет, скрипт загрузится и выполнится сразу, возможно, до того, как 
полностью загрузится страница, елси скрипт маленький , например.